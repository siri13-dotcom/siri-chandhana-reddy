  pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol";

contract MyFT is ERC20 {
    constructor(string memory _name, string memory _symbol) public ERC20(_name, _symbol) {}

    function mint(address account, uint256 amount) external {
        balanceOf(account) += amount;
        emit Transfer(address(0), account, amount);
    }
}
  pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol";

contract MyFT is ERC20 {
    constructor(string memory _name, string memory _symbol) public ERC20(_name, _symbol) {}

    function mint(address account, uint256 amount) external {
        balanceOf(account) += amount;
        emit Transfer(address(0), account, amount);
    }
}
 pragma solidity ^0.8.0;

contract TokenTransfer {
    function transfer(address from, address to, uint256 amount) external returns(bool success){
        require(from != to);
        
        // Check if the sender has enough tokens for this transaction.
        MyFT myft = new MyFT();
        require(myft.balanceOf(from)>=amount);

        // Subtract from sender's balance
        myft.transferFrom(from,to,amount); 

        return true;
    }
}
  pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol";
contract TokenTransfer {
    function transfer(address from, address to, uint256 amount) external returns(bool success){
        require(from != to);
        
        // Check if the sender has enough tokens for this transaction.
        MyFT myft = new MyFT();
        require(myft.balanceOf(from)>=amount);

        // Subtract from sender's balance
        myft.transferFrom(from,to,amount); 

        return true;
    }
}
contract MyFT is ERC20 {
    constructor(string memory _name, string memory _symbol) public ERC20(_name, _symbol) {}

    function mint(address account, uint256 amount) external {
        balanceOf(account) += amount;
        emit Transfer(address(0), account, amount);
    }

import "./TokenTransfer.sol";
  pragma solidity ^0.8.0;

contract TokenSender {
   function sendTokens() external returns(bool success){
       require(msg.sender == 0xYourAddressHere);
        MyFT myft = new MyFT();
           uint256 amountToTransfer=10;
            address recipient="someOtherUserAccount";
        
         // Call transfer
          tokentransfer.transfer( msg.sender,recipient,amountToTransfer);

    }
}
